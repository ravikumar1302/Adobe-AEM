

1. alert(" ") : to print a alert message when the site opens. Generally, avoided these days.
2. prompt(" " ) : to take input from user in the alert section
3. console.log() : writes data to the console. (To see consnole data, right click and select inspect, then click on console option to see the input)

--------------------------------------------------------------------------------------------------------------------------------------

4. JavaScript Message Boxes: alert(), confirm(), prompt()
    JavaScript provides built-in global functions to display popup message boxes for different purposes.

      -  alert(message): Display a popup box with the specified message with the OK button.
      -  confirm(message): Display a popup box with the specified message with OK and Cancel buttons.
      -  prompt(message, defaultValue): Display a popup box to take the user's input with the OK and Cancel buttons.
 

5. typeof : In Js, we have a keyword called typeof that returns the type of the variable. While this seems pretty fool-proof, there are some quirks that we should be aware of. In the Chrome console, let's type out each one of these:

    typeof ""; - "string"
    typeof 5; - "number"
    typeof false; - "boolean"
    typeof Symbol(); - "symbol"
    typeof undefined; - "undefined"
    typeof null; // hmmm, this is not what we expect, it returns "object"!

--------------------------------------------------------------------------------------------------------------------------------------

6. Converting between types : some ways to explicitly change the type of a value.

  a) Converting to a string: toString : The toString method will convert any value which is not undefined or null into a string.
    let num = 5;
    let bool = true;

    num.toString(); // "5";
    bool.toString(); // "true";

  b) Converting to a number : 
    parseInt("2"); // 2
    parseFloat("2"); // 2
    parseFloat("3.14"); // 3.14
    parseInt("2.3alkweflakwe"); // 2
    parseFloat("2.3alkweflakwe"); // 2.3
    parseInt("w2.3alkweflakwe"); // NaN (not a number)
    parseFloat("w2.3alkweflakwe"); // NaN (not a number)

  Both of these functions parse from left to right. If they see numbers, they'll continue parsing until they find a non-numerical character, and will either return an integer or a float, depending on which function was used. That's why parseInt("2.3alkweflakwe") returns a valid integer, but parseInt("w2.3alkweflakwe") does not.

  c) Somewhat related is the Number function. This doesn't parse, it simply tries to convert the entire string directly to a number. Sometimes this can lead to slightly different behavior compared to the parsing functions:
    Number("2"); // 2
    Number("3.14"); // 3.14
    Number("2.3alkweflakwe"); // NaN
    Number("w2.3alkweflakwe"); // NaN

  d) A nice shorthand for this conversion is the unary operator +:
    +"2"; // 2
    +"3.14"; // 3.14
    +"2.3alkweflakwe"; // NaN
    +"w2.3alkweflakwe"; // NaN

  - NaN : When you try to perform a numeric operation converting to a number with a value that can not be converted, you will get a special value called NaN (short for Not a Number).

  e) If you ever need to check if an expression evaluates to NaN you can use the handy isNaN function which returns true if the expression can not be converted to a number.

      let validConversion = Number("2")
      console.log("Is validConversion NaN?", isNaN(validConversion))     // Is validConversion NaN? false

      let invalidConversion = Number("hello world")
      console.log("Is invalidConversion NaN?", isNaN(invalidConversion))        // Is invalidConversion NaN? true

  f) Converting to a boolean: !! : !! will convert a value to its boolean equivalent.
    let greeting = "hi";
    let nothing = 0;

    !!greeting; // true
    !!nothing; // false


--------------------------------------------------------------------------------------------------------------------------------------

7. var and const : 
  - Two other keywords that we can use to declare variables in JavaScript, var and const. 
  - It is much more rarely used in modern JavaScript. 
  - const is an alternative to let but it does not allow you to redeclare, which makes it useful for variables that you do not want changed. 


8. 