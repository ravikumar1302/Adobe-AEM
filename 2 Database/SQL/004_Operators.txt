

1. Selecting ROWS : WHERE Clause
    a) OR, AND : The precednece is similar to BODMAS rule. 
    b) Precedence : AND > OR. Better is to use brackets properly to avoid errors
    c) IN : SELECT * FROM emp WHERE job='CLERK' OR job='ANALYST' OR job='MANAGER'; can also be written as SELECT * FROM emp WHERE job IN ('CLERK', 'ANALYST', 'MANAGER');
    d) NOT IN :      similarly, SELECT * FROM emp WHERE job !='CLERK' AND job !='ANALYST' AND job !='MANAGER'; can also be written as SELECT * FROM emp WHERE job NOT IN ('CLERK', 'ANALYST', 'MANAGER'); will show all rows except the mentioned three
    
    e) BETWEEN : SELECT * FROM emp WHERE sal>1500 AND sal<3000; can be written as SELECT * FROM emp WHERE sal BETWEEN (1500 AND 3000); BETWEEN by default includes the limit value also (1500 and 3000 in this case are included)
    f) NOT BETWEEN : SELECT * FROM emp WHERE sal<1500 AND sal>3000; can be written as SELECT * FROM emp WHERE sal NOT BETWEEN (1500 AND 3000); NOT BETWEEN by default does not includes the limit value also (1500 and 3000 in this case are not included)

    g) Important properties of NULL
        - NULL can-not be compared for equality and obviously for non=equality also. So statements like 'if x=NULL THEN' or 'WHERE x=NULL' do-not makes sense
        - Two NULL expressions can also be NOT said to be equal. e.g. if x=NULL and y=NULL, then it does not mean x and y are equal, because NULL represents unknown value, and how two unknown values can be termed as equal !
        - Any expression which involves a NULL term, results into NULL. e.g.  if you are evaluating x + y, in which x=NULL and y=5, then x+5 = NULL+5 will be NULL
        - Any expression if required to be tested for NULL must use the operators : IS NULL or IS NOT NULL
        - e.g. SELECT * FROM emp WHERE sal = NULL; is wrong, write SELECT * FROM emp WHERE sal IS NULL; same goes for IS NOT NULL
    
    h) LIKE :  SELECT * FROM emp WHERE name LIKE '%LL%'; it will show all the rows in which name has 'LL' letter in it.
                % is used to represent any no of characters, for fix amount of character, use underscore (_), e.g., '_ _ LL%'

    i) ORDER BY : SELECT * FROM emp ORDER BY sal; will show rows in order of increasing sal. SELECT * FROM emp ORDER BY sal ASC; ASC means ascending, but it also by default. For descending, use DESC.
                  The cell having NULL values, will show those rows in top in case of ascending order and in last in case of descending.
                  Two or more conditions can also be used, SELECT * FROM emp ORDER BY sal ASC, deptno DESC; the priority will be based on what is written first
            NOTE : SELECT * FROM emp ORDER BY sal WHERE dept = 20; is wrong, WHERE clause cannot be written after ORDER BY, You have to write it before ORDER BY.
            Also, except LIMIT clasue, all other operators must be written before ORDER BY and ORDER BY must be the last operator if it is there except LIMIT, which is used to limit the no of rows appearing
    
    j) LIMIT : SELECT * FROM emp LIMIT 5;   it will show only top or first 5 rows from the table
               SELECT * FROM emp LIMIT 0, 10;   it will show top 10 rows from the table starting from 0, first value (0 here) is called offset here 
               SELECT * FROM emp LIMIT 10, 10;  it will show top 10 rows from the table starting from 10

               More generalized syntax : SELECT * FROM <table_name> WHERE <condition> ORDER BY <column_name> LIMIT 0, 10;
   
    k) PIPE : SELECT * FROM emp WHERE deptno=20 || deptnp=30;   in place of OR we used ||. This is called PIPE operator

2. Displaying Specific Columns - Projection
    a) Specifying Projection : SELECT * FROM emp WHERE deptnp=30; shows all columns, but two display only particular columns, use column_names in place of *.
                                e.g.  SELECT ename, sal, hire_date FROM emp WHERE deptnp=30;
    b) AS - Column Alias : SELECT ename AS 'employee name, sal AS Salary, dept_no AS 'Department number' FROM emp WHERE deptnp=30;    To print user defined column name.
                        Single word alias does't need  '', "" quotes, but you can use them.
   
    c)  Arithmetic Expression : SELECT ename AS 'employee name, 
                                sal AS Salary, sal*70/100 AS allowance  FROM emp WHERE deptnp=30;
                                Also, SELECT 270+352 AS total; is also an expression
    d) DISTINCT : SELECT DISTINCT job FROM emp;     It shows all the distinct jobs, no repetitions
                    - DISTINCT operator should be written after SELECT
                    - SELECT DISTINCT job, dept_no FROM emp;    In this statement you may see same deptno or job, but the combination of both will be distinct and will not repeat
    
    e) IFNULL() function : It takes only 2 arguments one the variable that can be NULL and other the suggested value if variable is NULL. as NULL can't perform arithmatic evaluations, this function is used to provide a value if somevalue i NULL
                            SELECT ename AS 'employee name', sal AS salary, comm AS commision sal + IFNULL(comm, 0) AS earning FROM emp;    Using function IFNULL(), if comm= NULL, then it will be treated as 0 to evaluate sal + comm

    f)  COALESCE() function : IFNULL() can be replaced with COALESCE() gives same result, but it can take several arguments unlike IFNULL()
                              SELECT ename AS 'employee name', job, COALESCE(salary, commision, stipend) AS earning FROM emp;      It will return the first not-null value from the salary, commisson and stipend as earning

    g) CONCAT() String Concatination : SELECT CONCAT('Today is Raining', ' ', 'cats and elephants') AS phrase;  will print Today is Raining cats and elephants. ' ' is space
                                       SELECT CONCAT('Today is Raining', NULL, 'cats and elephants') AS phrase;  will print NULL
                                       SELECT CONCAT('Today is Raining', '', 'cats and elephants') AS phrase;    will print Today is Rainingcats and elephants. '' is empty string
                                       SELECT CONCAT(first_name, ' ', last_name) AS 'full name' FROM employees;     will print full name of all the employees 
                                       SELECT CONCAT(first_name, ' ', last_name) AS 'full name' FROM employees LIMIT 5;     will print full name of top 5 employees 

                                       To use pipe operator for concatination : SET @old_sql_mode = @@sql_mode;
                                                                                SET @@sql_mode = PIPES_AS_CONCAT;
                                       Now you can write :  'Today is Raining' || ' ' || 'cats and elephants' AS phrase;
                                       The NULL gives same output for NULL operator

                                       To revert back the pipe operator : SET @@sql_mode = @old_sql_mode;   without this || will work as concatination, not OR

    h)  Displaying Dates : SELECT CURDATE() AS today; or SELECT CURRENT_DATE() AS today;    will represent date in default format which is : yyyy-mm--dd
                         - SELECT DATE_FORMAT(CURRENT_DATE(), '%d-%m-%Y') AS today; (Note: 2nd argument is case sensetive here)     will represent date in format which is : dd-mm-yyyy
                         - SELECT DATE_FORMAT(CURRENT_DATE(), '%D-%M-%Y') AS today;     will represent date as 7th September 2022
                         - SELECT DATE_FORMAT(CURRENT_DATE(), '%D-%b-%Y') AS today;     will represent date as 7th Sept 2022
                         - SELECT DATE_FORMAT(CURRENT_DATE(), '%D-%b-%Y, %W') AS today;     will represent date as 7th Sept 2022, Wednesday
                         - SELECT DATE_FORMAT(CURRENT_TIMESTAMP(), '%D-%b-%Y, %r') AS today;     will represent date as 7th Sept 2022, 10:45:12 PM
                         - SELECT DATE_FORMAT(CURRENT_TIMESTAMP(), '%D-%b-%Y, %T') AS today;     will represent date as 7th Sept 2022, 22:45:12 PM
                         - For format visit - Udemy course given this site link : https://www.mysqltutorial.org/mysql-date_format/
    
    i) Temporal Operator INTERVAL :  SELECT DATE_FORMAT(CURDATE() + INTERVAL 7 DAY, '%D-%M-%Y, %W') AS 'week after';    will show a date 1 week after from today, i.e. 14th Sept 2022, Wednesday 
                                   - SELECT DATE_FORMAT(CURDATE() + INTERVAL 1 WEEK, '%D-%M-%Y, %W') AS 'week after';   will give same result
                                   - SELECT DATE_FORMAT(CURDATE() + INTERVAL 2 QUARTER, '%D-%M-%Y, %W') AS '2 Quarter';   will give 6 months date from today
                                   

3. SQL Nested Query Techniques :
    a) Nested Query :
    b) Multivalue Subquery :
    c) Set Comparision Subquery :
    d) Correlated Subquery :
    e) EXISTS Operator :
    f) NULL Subqueries :
    g) ALL Operator :
    h) Operator ANY :

4. SQL Joins

5. MySQL Aggregation

6. Create, Alter & Drop table

7. Data Integrity and Constraints

8. MySQL DML - Data MAnipulation Language

9. MySQL Transactions (TCL)

10. MySQL Scalar Built-in Functions

11. MySQL Stored Routines

12. MySQL Error Handling and Raising errors

13. MySQL Stored Functions

14. MySQL Views

15. MySQL Triggers

16. MySQL Scheduled Events

17. MySQL Index

18. Swift Interview Prepartation - Interview Q&A

