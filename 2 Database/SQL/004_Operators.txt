

1. Selecting ROWS : WHERE Clause
    a) OR, AND : The precednece is similar to BODMAS rule. 
    b) Precedence : AND > OR. Better is to use brackets properly to avoid errors
    c) IN : SELECT * FROM emp WHERE job='CLERK' OR job='ANALYST' OR job='MANAGER'; can also be written as SELECT * FROM emp WHERE job IN ('CLERK', 'ANALYST', 'MANAGER');
            
        The following SQL statement selects all customers that are from the same countries as the suppliers:
            SELECT * FROM Customers WHERE Country IN (SELECT Country FROM Suppliers);

    d) NOT IN : similarly, SELECT * FROM emp WHERE job !='CLERK' AND job !='ANALYST' AND job !='MANAGER'; can also be written as SELECT * FROM emp WHERE job NOT IN ('CLERK', 'ANALYST', 'MANAGER'); will show all rows except the mentioned three
    
    e) BETWEEN : SELECT * FROM emp WHERE sal>1500 AND sal<3000; can be written as SELECT * FROM emp WHERE sal BETWEEN (1500 AND 3000); BETWEEN by default includes the limit value also (1500 and 3000 in this case are included)
    f) NOT BETWEEN : SELECT * FROM emp WHERE sal<1500 AND sal>3000; can be written as SELECT * FROM emp WHERE sal NOT BETWEEN (1500 AND 3000); NOT BETWEEN by default does not includes the limit value also (1500 and 3000 in this case are not included)

    g) Important properties of NULL
        - NULL can-not be compared for equality and obviously for non=equality also. So statements like 'if x=NULL THEN' or 'WHERE x=NULL' do-not makes sense
        - Two NULL expressions can also be NOT said to be equal. e.g. if x=NULL and y=NULL, then it does not mean x and y are equal, because NULL represents unknown value, and how two unknown values can be termed as equal !
        - Any expression which involves a NULL term, results into NULL. e.g.  if you are evaluating x + y, in which x=NULL and y=5, then x+5 = NULL+5 will be NULL
        - Any expression if required to be tested for NULL must use the operators : IS NULL or IS NOT NULL
        - e.g. SELECT * FROM emp WHERE sal = NULL; is wrong, write SELECT * FROM emp WHERE sal IS NULL; same goes for IS NOT NULL
    
    h) LIKE :  SELECT * FROM emp WHERE name LIKE '%LL%'; it will show all the rows in which name has 'LL' letter in it.
                % is used to represent any no of characters, for fix amount of character, use underscore (_), e.g., '_ _ LL%'
        NOT LIKE : to display data other then given value

        - SQL Wildcards : Wildcard characters are used with the LIKE operator. The LIKE operator is used in a WHERE clause to search for a specified pattern in a column.
                
            %	Represents zero or more characters	                            bl% finds bl, black, blue, and blob
            _	Represents a single character	                                h_t finds hot, hat, and hit
            []	Represents any single character within the brackets	            h[oa]t finds hot and hat, but not hit
            ^	Represents any character not in the brackets	                h[^oa]t finds hit, but not hot and hat
            [!] Using the [!charlist] Wildcards                                 Select all customers with a City NOT starting with "b", "s", or "p":
            -	Represents any single character within the specified range	    c[a-b]t finds cat and cbt
        
        All the wildcards can also be used in combinations!

    i) ORDER BY : SELECT * FROM emp ORDER BY sal; will show rows in order of increasing sal. SELECT * FROM emp ORDER BY sal ASC; ASC means ascending, but it also by default. For descending, use DESC.
                  The cell having NULL values, will show those rows in top in case of ascending order and in last in case of descending.
                  Two or more conditions can also be used, SELECT * FROM emp ORDER BY sal ASC, deptno DESC; the priority will be based on what is written first
            NOTE : SELECT * FROM emp ORDER BY sal WHERE dept = 20; is wrong, WHERE clause cannot be written after ORDER BY, You have to write it before ORDER BY.
            Also, except LIMIT clasue, all other operators must be written before ORDER BY and ORDER BY must be the last operator if it is there except LIMIT, which is used to limit the no of rows appearing
    
    j) LIMIT : SELECT * FROM emp LIMIT 5;   it will show only top or first 5 rows from the table
               SELECT * FROM emp LIMIT 0, 10;   it will show top 10 rows from the table starting from 0, first value (0 here) is called offset here 
               SELECT * FROM emp LIMIT 10, 10;  it will show top 10 rows from the table starting from 10

               More generalized syntax : SELECT * FROM <table_name> WHERE <condition> ORDER BY <column_name> LIMIT 0, 10;
   
    k) PIPE : SELECT * FROM emp WHERE deptno=20 || deptno=30;   in place of OR we used ||. This is called PIPE operator

--------------------------------------------------------------------------------------------------------------------------------------

2. Displaying Specific Columns - Projection
    a) Specifying Projection : SELECT * FROM emp WHERE deptnp=30; shows all columns, but two display only particular columns, use column_names in place of *.
                                e.g.  SELECT ename, sal, hire_date FROM emp WHERE deptnp=30;
    b) AS - Column Alias : SELECT ename AS 'employee name, sal AS Salary, dept_no AS 'Department number' FROM emp WHERE deptnp=30;    To print user defined column name.
                        Single word alias does't need  '', "" quotes, but you can use them.
        - An alias only exists for the duration of the query   
        - The following SQL statements creates two aliases : SELECT CustomerName AS Customer, ContactName AS [Contact Person] FROM Customers;
        - Note: It requires double quotation marks or square brackets if the alias name contains spaces

        - The following SQL statement creates an alias named "Address" that combine four columns (Address, PostalCode, City and Country):
            SELECT CustomerName, Address + ', ' + PostalCode + ' ' + City + ', ' + Country AS Address FROM Customers;

        - Note: To get the SQL statement above to work in MySQL use the following:
            SELECT CustomerName, CONCAT(Address,', ',PostalCode,', ',City,', ',Country) AS Address FROM Customers;

        The following SQL statement selects all the orders from the customer with CustomerID=4 (Around the Horn). We use the "Customers" and "Orders" tables, and give them the table aliases of "c" and "o" respectively (Here we use aliases to make the SQL shorter):
        SELECT o.OrderID, o.OrderDate, c.CustomerName FROM Customers AS c, Orders AS o WHERE c.CustomerName='Around the Horn' AND c.CustomerID=o.CustomerID;
        
        The following SQL statement is the same as above, but without aliases:
        SELECT Orders.OrderID, Orders.OrderDate, Customers.CustomerName FROM Customers, Orders WHERE Customers.CustomerName='Around the Horn' AND Customers.CustomerID=Orders.CustomerID;

        Aliases can be useful when:
            There are more than one table involved in a query
            Functions are used in the query
            Column names are big or not very readable
            Two or more columns are combined together

    c) Arithmetic Expression : SELECT ename AS 'employee name, sal AS Salary, sal*70/100 AS allowance  FROM emp WHERE deptnp=30;
                                Also, SELECT 270+352 AS total; is also an expression
    d) DISTINCT : SELECT DISTINCT job FROM emp;     It shows all the distinct jobs, no repetitions
                    - DISTINCT operator should be written after SELECT
                    - SELECT DISTINCT job, dept_no FROM emp;    In this statement you may see same deptno or job, but the combination of both will be distinct and will not repeat
    
    e) IFNULL() function : It takes only 2 arguments one the variable that can be NULL and other the suggested value if variable is NULL. as NULL can't perform arithmatic evaluations, this function is used to provide a value if somevalue i NULL
                            SELECT ename AS 'employee name', sal AS salary, comm AS commision sal + IFNULL(comm, 0) AS earning FROM emp;    Using function IFNULL(), if comm= NULL, then it will be treated as 0 to evaluate sal + comm

    f)  COALESCE() function : IFNULL() can be replaced with COALESCE() gives same result, but it can take several arguments unlike IFNULL()
                              SELECT ename AS 'employee name', job, COALESCE(salary, commision, stipend) AS earning FROM emp;      It will return the first not-null value from the salary, commisson and stipend as earning

    g) CONCAT() String Concatination : SELECT CONCAT('Today is Raining', ' ', 'cats and elephants') AS phrase;  will print Today is Raining cats and elephants. ' ' is space
                                       SELECT CONCAT('Today is Raining', NULL, 'cats and elephants') AS phrase;  will print NULL
                                       SELECT CONCAT('Today is Raining', '', 'cats and elephants') AS phrase;    will print Today is Rainingcats and elephants. '' is empty string
                                       SELECT CONCAT(first_name, ' ', last_name) AS 'full name' FROM employees;     will print full name of all the employees 
                                       SELECT CONCAT(first_name, ' ', last_name) AS 'full name' FROM employees LIMIT 5;     will print full name of top 5 employees 

                                       To use pipe operator for concatination : SET @old_sql_mode = @@sql_mode;
                                                                                SET @@sql_mode = PIPES_AS_CONCAT;
                                       Now you can write :  'Today is Raining' || ' ' || 'cats and elephants' AS phrase;
                                       The NULL gives same output for NULL operator

                                       To revert back the pipe operator : SET @@sql_mode = @old_sql_mode;   without this || will work as concatination, not OR

    h)  Displaying Dates : SELECT CURDATE() AS today; or SELECT CURRENT_DATE() AS today;    will represent date in default format which is : yyyy-mm--dd
                         - SELECT DATE_FORMAT(CURRENT_DATE(), '%d-%m-%Y') AS today; (Note: 2nd argument is case sensetive here)     will represent date in format which is : dd-mm-yyyy
                         - SELECT DATE_FORMAT(CURRENT_DATE(), '%D-%M-%Y') AS today;     will represent date as 7th September 2022
                         - SELECT DATE_FORMAT(CURRENT_DATE(), '%D-%b-%Y') AS today;     will represent date as 7th Sept 2022
                         - SELECT DATE_FORMAT(CURRENT_DATE(), '%D-%b-%Y, %W') AS today;     will represent date as 7th Sept 2022, Wednesday
                         - SELECT DATE_FORMAT(CURRENT_TIMESTAMP(), '%D-%b-%Y, %r') AS today;     will represent date as 7th Sept 2022, 10:45:12 PM
                         - SELECT DATE_FORMAT(CURRENT_TIMESTAMP(), '%D-%b-%Y, %T') AS today;     will represent date as 7th Sept 2022, 22:45:12 PM
                         - For format visit - Udemy course given this site link : https://www.mysqltutorial.org/mysql-date_format/
    
    i) Temporal Operator INTERVAL :  SELECT DATE_FORMAT(CURDATE() + INTERVAL 7 DAY, '%D-%M-%Y, %W') AS 'week after';    will show a date 1 week after from today, i.e. 14th Sept 2022, Wednesday 
                                   - SELECT DATE_FORMAT(CURDATE() + INTERVAL 1 WEEK, '%D-%M-%Y, %W') AS 'week after';   will give same result
                                   - SELECT DATE_FORMAT(CURDATE() + INTERVAL 2 QUARTER, '%D-%M-%Y, %W') AS '2 Quarter';   will give 6 months date from today
                                   
--------------------------------------------------------------------------------------------------------------------------------------

3. SQL Nested Query Techniques
    a) Nested Query :- SELECT * FROM dept; 
                       SELECT * FROM emp;    and then execute both statement together, will represent 2 tables
                    
                    - 



    b) Multivalue Subquery :
    c) Set Comparision Subquery :
    d) Correlated Subquery :
    e) EXISTS Operator :
    f) NULL Subqueries :
    g) ALL Operator :
    h) Operator ANY :

--------------------------------------------------------------------------------------------------------------------------------------

4. SQL Joins
    - A JOIN clause is used to combine rows from two or more tables, based on a related column between them.
    - Syntax : SELECT column_name(s) FROM table1 INNER JOIN table2 ON table1.column_name = table2.column_name;
    - Here are the different types of the JOINs in SQL:
        (INNER) JOIN: Returns records that have matching values in both tables
        LEFT (OUTER) JOIN: Returns all records from the left table(table 1), and the matched records from the right table(table 2)
        RIGHT (OUTER) JOIN: Returns all records from the right table, and the matched records from the left table
        FULL (OUTER) JOIN: Returns all records when there is a match in either left or right table

    - Examples : 
        SELECT o.OrderID, c.CustomerName FROM Orders AS o INNER JOIN Customers AS c ON o.CustomerID = c.CustomerID;
        SELECT c.CustomerName, o.OrderID FROM Customers AS c LEFT JOIN Orders AS o ON c.CustomerID = o.CustomerID ORDER BY c.CustomerName;
        SELECT o.OrderID, e.LastName, e.FirstName FROM Orders AS o RIGHT JOIN Employees AS e ON o.EmployeeID = e.EmployeeID ORDER BY o.OrderID;
        SELECT c.CustomerName, o.OrderID FROM Customers AS c FULL OUTER JOIN Orders AS o ON c.CustomerID=o.CustomerID ORDER BY c.CustomerName;

    - JOIN Three Tables : The following SQL statement selects all orders with customer and shipper information:
        SELECT o.OrderID, c.CustomerName, s.ShipperName FROM ( (Orders AS o INNER JOIN Customers AS C ON o.CustomerID = c.CustomerID) 
                                                                INNER JOIN Shippers AS s ON o.ShipperID = s.ShipperID);
    
    - Note: In some databases LEFT JOIN is called LEFT OUTER JOIN.
    - Tip: FULL OUTER JOIN and FULL JOIN are the same.
    - Note: FULL OUTER JOIN can potentially return very large result-sets!

    - SQL Self Join : A self join is a regular join, but the table is joined with itself.
        Self Join Syntax : SELECT column_name(s) FROM table1 T1, table1 T2 WHERE condition;     T1 and T2 are different table aliases for the same table.
    - The following SQL statement matches customers that are from the same city:    
        SELECT A.CustomerName AS CustomerName1, B.CustomerName AS CustomerName2, A.City FROM Customers A, Customers B WHERE A.CustomerID <> B.CustomerID AND A.City = B.City ORDER BY A.City;

4.2 SQL UNION operator : The UNION operator is used to combine the result-set of two or more SELECT statements.
    - Every SELECT statement within UNION must have the same number of columns
    - The columns must also have similar data types
    - The columns in every SELECT statement must also be in the same order

    - The UNION operator selects only distinct values by default. To allow duplicate values, use UNION ALL.
    - UNION Syntax : SELECT column_name(s) FROM table1 UNION SELECT column_name(s) FROM table2;
    - UNION ALL Syntax : SELECT column_name(s) FROM table1 UNION ALL SELECT column_name(s) FROM table2;
    - Note: The column names in the result-set are usually equal to the column names in the first SELECT statement.
    
    - Examples :
        SELECT City FROM Customers UNION SELECT City FROM Suppliers ORDER BY City; 
        SELECT City FROM Customers UNION ALL SELECT City FROM Suppliers ORDER BY City;

Examples of Many queries Together :
    - SELECT e.LastName, COUNT(o.OrderID) AS NumberOfOrders FROM (Orders AS o INNER JOIN Employees AS e ON o.EmployeeID = e.EmployeeID) GROUP BY LastName HAVING COUNT(o.OrderID) > 10;
    - SELECT e.LastName, COUNT(o.OrderID) AS NumberOfOrders FROM Orders AS o INNER JOIN Employees AS e ON o.EmployeeID = e.EmployeeID WHERE LastName = 'Davolio' OR LastName = 'Fuller' GROUP BY LastName HAVING COUNT(o.OrderID) > 25;
    - 

-------------------------------------------------------------------------------------------------------------------------------------- 
    
5. MySQL Aggregation

--------------------------------------------------------------------------------------------------------------------------------------

6. CREATE, ALTER, Truncate & DROP table

    a) CREATE : This statement is used to create a new table in a database.
        - CREATE TABLE Persons ( PersonID int, LastName varchar(255), FirstName varchar(255), Address varchar(255), City varchar(255) );
        - Create Table Using Another Table : CREATE TABLE new_table_name AS SELECT column1, column2,... FROM existing_table_name WHERE ....;
            CREATE TABLE TestTable AS SELECT customername, contactname FROM customers;
    
    b) DROP TABLE : It is used to drop an existing table in a database.
        - DROP TABLE table_name;
    
    c) TRUNCATE TABLE : It is used to delete the data inside a table, but not the table itself.
        - TRUNCATE TABLE table_name;
    
    d) ALTER : It is used to add, delete, or modify columns in an existing table. It is also used to add and drop various constraints on an existing table.
        - ADD Column : To add a column in a table, use the following syntax: ALTER TABLE table_name ADD column_name datatype;
            ALTER TABLE Customers ADD Email varchar(255);
        
        - DROP COLUMN : To delete a column in a table, use the following syntax (notice that some database systems don't allow deleting a column): ALTER TABLE table_name DROP COLUMN column_name;
            ALTER TABLE Customers DROP COLUMN Email;
        
        - ALTER/MODIFY COLUMN : To change the data type of a column in a table, use the following syntax: ALTER TABLE table_name MODIFY COLUMN column_name datatype;
        
        - Change Data Type Example : ALTER TABLE Persons ALTER COLUMN DateOfBirth year;
        - 

--------------------------------------------------------------------------------------------------------------------------------------

7. Data Integrity and Constraints
    - SQL constraints are used to specify rules for data in a table.

    a) SQL Create Constraints : Constraints can be specified when the table is created with the CREATE TABLE statement, or after the table is created with the ALTER TABLE statement.
        - Syntax
            CREATE TABLE table_name (
                column1 datatype constraint,
                column2 datatype constraint,
                column3 datatype constraint,
                ....
            );
        - SQL Constraints : SQL constraints are used to specify rules for the data in a table.
            - Constraints are used to limit the type of data that can go into a table. This ensures the accuracy and reliability of the data in the table. If there is any violation between the constraint and the data action, the action is aborted.
            - Constraints can be column level or table level. Column level constraints apply to a column, and table level constraints apply to the whole table.

        -The following constraints are commonly used in SQL:
            NOT NULL - Ensures that a column cannot have a NULL value
            UNIQUE - Ensures that all values in a column are different
            PRIMARY KEY - A combination of a NOT NULL and UNIQUE. Uniquely identifies each row in a table
            FOREIGN KEY - Prevents actions that would destroy links between tables
            CHECK - Ensures that the values in a column satisfies a specific condition
            DEFAULT - Sets a default value for a column if no value is specified
            CREATE INDEX - Used to create and retrieve data from the database very quickly

        - To allow naming of a PRIMARY KEY constraint, and for defining a PRIMARY KEY constraint on multiple columns, use the following SQL syntax:
                CREATE TABLE Persons (
                    ID int NOT NULL,
                    LastName varchar(255) NOT NULL,
                    FirstName varchar(255),
                    Age int,
                    CONSTRAINT PK_Person PRIMARY KEY (ID,LastName)
                );
        - To allow naming of a CHECK constraint, and for defining a CHECK constraint on multiple columns, use the following SQL syntax:
            ALTER TABLE Persons ADD CONSTRAINT CHK_PersonAge CHECK (Age>=18 AND City='Sandnes');
        - ALTER TABLE Persons ALTER City SET DEFAULT 'Sandnes';
            ALTER TABLE Persons ALTER City DROP DEFAULT;
        - 

--------------------------------------------------------------------------------------------------------------------------------------

8. MySQL DML - Data MAnipulation Language

9. MySQL Transactions (TCL)

10. MySQL Scalar Built-in Functions

11. MySQL Stored Routines

12. MySQL Error Handling and Raising errors

13. MySQL Stored Functions

--------------------------------------------------------------------------------------------------------------------------------------

14. MySQL Views
    - In SQL, a view is a virtual table based on the result-set of an SQL statement.
    - A view contains rows and columns, just like a real table. The fields in a view are fields from one or more real tables in the database.
    - You can add SQL statements and functions to a view and present the data as if the data were coming from one single table. 
    - Note: A view always shows up-to-date data! The database engine recreates the view, every time a user queries it

    a) CREATE VIEW
        - Syntax : 
            CREATE VIEW view_name AS SELECT column1, column2, ... FROM table_name WHERE condition;  
        - Example : CREATE VIEW [Brazil Customers] AS SELECT CustomerName, ContactName FROM Customers WHERE Country = 'Brazil';
            We can query the view above as follows : SELECT * FROM [Brazil Customers];
    
    b) Updating a View : A view can be updated with the CREATE OR REPLACE VIEW statement.
        - CREATE OR REPLACE VIEW view_name AS SELECT column1, column2, ... FROM table_name WHERE condition;
        The following SQL adds the "City" column to the "Brazil Customers" view:
            CREATE OR REPLACE VIEW [Brazil Customers] AS SELECT CustomerName, ContactName, City FROM Customers WHERE Country = 'Brazil';
    
    c) DROP View : A view is deleted with the DROP VIEW statement.
        - DROP VIEW view_name;
        - DROP VIEW [Brazil Customers];


--------------------------------------------------------------------------------------------------------------------------------------

15. MySQL Triggers

16. MySQL Scheduled Events

--------------------------------------------------------------------------------------------------------------------------------------

17. MySQL Index
    - CREATE INDEX : this statement is used to create indexes in tables.
    - Indexes are used to retrieve data from the database more quickly than otherwise. 
    - The users cannot see the indexes, they are just used to speed up searches/queries.
    - Note: Updating a table with indexes takes more time than updating a table without (because the indexes also need an update). So, only create indexes on columns that will be frequently searched against.
    
    - CREATE INDEX Syntax : Creates an index on a table. Duplicate values are allowed:
        CREATE INDEX index_name ON table_name (column1, column2, ...);
    - CREATE UNIQUE INDEX Syntax : Creates a unique index on a table. Duplicate values are not allowed:
        CREATE UNIQUE INDEX index_name ON table_name (column1, column2, ...);
    
    - Example : The SQL statement below creates an index named "idx_lastname" on the "LastName" column in the "Persons" table:
        CREATE INDEX idx_lastname ON Persons (LastName);
    - If you want to create an index on a combination of columns, you can list the column names within the parentheses, separated by commas:
        CREATE INDEX idx_pname ON Persons (LastName, FirstName);
    - ALTER TABLE table_name DROP INDEX index_name;


--------------------------------------------------------------------------------------------------------------------------------------


18. Swift Interview Prepartation - Interview Q&A

