

1. LEFT, RIGHT : SELECT DISTINCT (CITY) FROM STATION WHERE LEFT(CITY,1) IN ('A','E','I','O','U');
    where, LEFT (CITY,1) - this function tries to extract letters from left for example the above LEFT(CITY,1) extracts 1st letter of city from left , RIGHT(NAME,3) - this extracts 3 letters from name from right side

2. EXISTS operator : It is used to test for the existence of any record in a subquery. It returns TRUE if the subquery returns one or more records.
    Syntax : SELECT column_name(s) FROM table_name WHERE EXISTS (SELECT column_name FROM table_name WHERE condition);
    Example : The following SQL statement returns TRUE and lists the suppliers with a product price less than 20:
        SELECT SupplierName FROM Suppliers WHERE EXISTS (SELECT ProductName FROM Products WHERE Products.SupplierID = Suppliers.supplierID AND Price < 20);

3. ANY and ALL operator : These operators allow you to perform a comparison between a single column value and a range of other values.

    - Note : Note: The operator must be a standard comparison operator (=, <>, !=, >, >=, <, or <=).

    a) ANY Operator
    - Returns TRUE if ANY of the subquery values meet the condition
    - ANY means that the condition will be true if the operation is true for any of the values in the range.
    - Syntax : SELECT column_name(s) FROM table_name WHERE column_name operator ANY   (SELECT column_name   FROM table_name   WHERE condition);
    - Example : The following SQL statement lists the ProductName if it finds ANY records in the OrderDetails table has Quantity equal to 10 (this will return TRUE because the Quantity column has some values of 10):
        SELECT ProductName FROM Products WHERE ProductID = ANY   (SELECT ProductID   FROM OrderDetails   WHERE Quantity = 10);
    

    b) ALL operator : 
    - Returns TRUE if ALL of the subquery values meet the condition
    - Is used with SELECT, WHERE and HAVING statements
    - ALL means that the condition will be true only if the operation is true for all values in the range. 
    - Syntax With SELECT : SELECT ALL column_name(s) FROM table_name WHERE condition; 
    - Syntax With WHERE or HAVING : SELECT column_name(s) FROM table_name WHERE column_name operator ALL (SELECT column_name FROM table_name WHERE condition);
    - Example : SELECT ALL ProductName FROM Products WHERE TRUE;
    - Example : The following SQL statement lists the ProductName if ALL the records in the OrderDetails table has Quantity equal to 10. This will of course return FALSE because the Quantity column has many different values (not only the value of 10):
        SELECT ProductName FROM Products WHERE ProductID = ALL (SELECT ProductID FROM OrderDetails WHERE Quantity = 10);

--------------------------------------------------------------------------------------------------------------------------------------

4. SELECT INTO : This statement copies data from one table into a new table
    - Syntax to Copy all columns into a new table : SELECT * INTO newtable [IN externaldb] FROM oldtable WHERE condition;
    - Copy only some columns into a new table : SELECT column1, column2, column3, ... INTO newtable [IN externaldb] FROM oldtable WHERE condition;
    - The new table will be created with the column-names and types as defined in the old table. You can create new column names using the AS clause.
    - Examples : 
        - SELECT * INTO CustomersBackup2017 FROM Customers;
        - The following SQL statement uses the IN clause to copy the table into a new table in another database:
            SELECT * INTO CustomersBackup2017 IN 'Backup.mdb' FROM Customers;
        - The following statement copies only a few columns into a new table: SELECT CustomerName, ContactName INTO CustomersBackup2017 FROM Customers;
        - The following statement copies only the German customers into a new table: SELECT * INTO CustomersGermany FROM Customers WHERE Country = 'Germany';
        - The following statement copies data from more than one table into a new table: SELECT Customers.CustomerName, Orders.OrderID INTO CustomersOrderBackup2017 FROM Customers LEFT JOIN Orders ON Customers.CustomerID = Orders.CustomerID;

        - Tip: SELECT INTO can also be used to create a new, empty table using the schema of another. Just add a WHERE clause that causes the query to return no data:
            SELECT * INTO newtable FROM oldtable WHERE 1 = 0; 

--------------------------------------------------------------------------------------------------------------------------------------

5. INSERT INTO SELECT : This statement copies data from one table and inserts it into another table.
    - This statement requires that the data types in source and target tables match.
    - Note: The existing records in the target table are unaffected.
    - Syntax for Copying all columns from one table to another table : INSERT INTO table2 SELECT * FROM table1 WHERE condition;
    - Copy only some columns from one table into another table : INSERT INTO table2 (column1, column2, column3, ...) SELECT column1, column2, column3, ... FROM table1 WHERE condition;
    - Example : 
        - The following statement copies "Suppliers" into "Customers" (the columns that are not filled with data, will contain NULL):
            INSERT INTO Customers (CustomerName, City, Country) SELECT SupplierName, City, Country FROM Suppliers;
        - The following statement copies "Suppliers" into "Customers" (fill all columns):
            INSERT INTO Customers (CustomerName, ContactName, Address, City, PostalCode, Country) SELECT SupplierName, ContactName, Address, City, PostalCode, Country FROM Suppliers;
        - The following statement copies only the German suppliers into "Customers":
            INSERT INTO Customers (CustomerName, City, Country) SELECT SupplierName, City, Country FROM Suppliers WHERE Country='Germany';

--------------------------------------------------------------------------------------------------------------------------------------

6. CASE : 
    - The CASE expression goes through conditions and returns a value when the first condition is met (like an if-then-else statement). So, once a condition is true, it will stop reading and return the result. If no conditions are true, it returns the value in the ELSE clause. If there is no ELSE part and no conditions are true, it returns NULL.
    - Syntax :
    CASE
        WHEN condition1 THEN result1
        WHEN condition2 THEN result2
        WHEN conditionN THEN resultN
        ELSE result
    END;

    - Example : SELECT OrderID, Quantity,
        CASE
            WHEN Quantity > 30 THEN 'The quantity is greater than 30'
            WHEN Quantity = 30 THEN 'The quantity is 30'
            ELSE 'The quantity is under 30'
        END AS QuantityText
        FROM OrderDetails;

    - Example : The following statement will order the customers by City. However, if City is NULL, then order by Country:
        SELECT CustomerName, City, Country FROM Customers ORDER BY
        (CASE
            WHEN City IS NULL THEN Country
            ELSE City
        END);

--------------------------------------------------------------------------------------------------------------------------------------

7. Stored Procedure : A stored procedure is a prepared SQL code that you can save, so the code can be reused over and over again.
    - So if you have an SQL query that you write over and over again, save it as a stored procedure, and then just call it to execute it.
    - You can also pass parameters to a stored procedure, so that the stored procedure can act based on the parameter value(s) that is passed.
    - Syntax to create : CREATE PROCEDURE procedure_name AS sql_statement GO;
    - Syntax to execute : EXEC procedure_name;
    - Example : CREATE PROCEDURE SelectAllCustomers AS SELECT * FROM Customers GO;
    - Execute : EXEC SelectAllCustomers;

    - Stored Procedure With One Parameter : The following SQL statement creates a stored procedure that selects Customers from a particular City from the "Customers" table:
        Example : CREATE PROCEDURE SelectAllCustomers @City nvarchar(30) AS SELECT * FROM Customers WHERE City = @City GO;
        Execute : EXEC SelectAllCustomers @City = 'London';
    
    - Stored Procedure With Multiple Parameters : Setting up multiple parameters is very easy. Just list each parameter and the data type separated by a comma as shown below.
    - The following SQL statement creates a stored procedure that selects Customers from a particular City with a particular PostalCode from the "Customers" table:
        CREATE PROCEDURE SelectAllCustomers @City nvarchar(30), @PostalCode nvarchar(10) AS SELECT * FROM Customers WHERE City = @City AND PostalCode = @PostalCode GO;
        Execute : EXEC SelectAllCustomers @City = 'London', @PostalCode = 'WA1 1DP';

--------------------------------------------------------------------------------------------------------------------------------------

8. SQL Operators 
    SQL Arithmetic Operators
        +	Add	
        -	Subtract	
        *	Multiply	
        /	Divide	
        %	Modulo	

    SQL Bitwise Operators
        &	Bitwise AND
        |	Bitwise OR
        ^	Bitwise exclusive OR

    SQL Comparison Operators
        =	Equal to	
        >	Greater than	
        <	Less than	
        >=	Greater than or equal to	
        <=	Less than or equal to	
        <>	Not equal to	

    SQL Compound Operators
        +=	Add equals
        -=	Subtract equals
        *=	Multiply equals
        /=	Divide equals
        %=	Modulo equals
        &=	Bitwise AND equals
        ^-=	Bitwise exclusive equals
        |*=	Bitwise OR equals

    SQL Logical Operators
        ALL	        TRUE if all of the subquery values meet the condition	
        AND	        TRUE if all the conditions separated by AND is TRUE	
        ANY	        TRUE if any of the subquery values meet the condition	
        BETWEEN	    TRUE if the operand is within the range of comparisons	
        EXISTS	    TRUE if the subquery returns one or more records	
        IN	        TRUE if the operand is equal to one of a list of expressions	
        LIKE	    TRUE if the operand matches a pattern	
        NOT	        Displays a record if the condition(s) is NOT TRUE	
        OR	        TRUE if any of the conditions separated by OR is TRUE	
        SOME	    TRUE if any of the subquery values meet the condition

--------------------------------------------------------------------------------------------------------------------------------------

9. ROUND(value) : round the value down to the nearest integer
    CEIL : rounds value up to the next integer

10. REPLACE : replaces value
    - REPLACE(SALARY, 0, '')  :Replaces 0 in SALARY with '' or empty string
