

1. CREATE DATABASE : This statement is used to create a new SQL database. 
    - CREATE DATABASE t1; 
    - Once a database is created, you can check it in the list of databases with the following SQL command: SHOW DATABASES;

2.  DROP DATABASE : This statement is used to drop an existing SQL database.
    - DROP DATABASE t1;

--------------------------------------------------------------------------------------------------------------------------------------

3. SQL BACKUP DATABASE : This statement is used in SQL Server to create a full back up of an existing SQL database.
    - Syntax : BACKUP DATABASE databasename TO DISK = 'filepath';
    - The SQL BACKUP WITH DIFFERENTIAL Statement : A differential back up only backs up the parts of the database that have changed since the last full database backup.
        BACKUP DATABASE databasename TO DISK = 'filepath' WITH DIFFERENTIAL;
    - BACKUP DATABASE Example : The following SQL statement creates a full back up of the existing database "testDB" to the D disk:
        BACKUP DATABASE testDB TO DISK = 'D:\backups\testDB.bak';
    
    - Tip: Always back up the database to a different drive than the actual database. Then, if you get a disk crash, you will not lose your backup file along with the database.
    - Example : BACKUP DATABASE testDB TO DISK = 'D:\backups\testDB.bak';
                BACKUP DATABASE testDB TO DISK = 'D:\backups\testDB.bak' WITH DIFFERENTIAL;

--------------------------------------------------------------------------------------------------------------------------------------

4. AUTO INCREMENT : It allows a unique number to be generated automatically when a new record is inserted into a table. 
    - Often this is the primary key field that we would like to be created automatically every time a new record is inserted.
    - Syntax : 
        CREATE TABLE Persons (
            Personid int NOT NULL AUTO_INCREMENT,
            LastName varchar(255) NOT NULL,
            FirstName varchar(255),
            Age int,
            PRIMARY KEY (Personid)
        );
    - By default, the starting value for AUTO_INCREMENT is 1, and it will increment by 1 for each new record.
    - To let the sequence start with another value, use : ALTER TABLE Persons AUTO_INCREMENT=100;
    
--------------------------------------------------------------------------------------------------------------------------------------

5. SQL Dates : 
    - MySQL comes with the following data types for storing a date or a date/time value in the database :
        DATE - format YYYY-MM-DD
        DATETIME - format: YYYY-MM-DD HH:MI:SS
        TIMESTAMP - format: YYYY-MM-DD HH:MI:SS
        YEAR - format YYYY or YY
    
    - Note: Two dates can easily be compared if there is no time component involved!
    - Tip: To keep your queries simple and easy to maintain, do not use time-components in your dates, unless you have to!
    - SELECT * FROM Orders WHERE OrderDate='2008-11-11'
    - 

--------------------------------------------------------------------------------------------------------------------------------------

6. SQL Injections : https://www.w3schools.com/sql/sql_injection.asp

    - SQL injection is a code injection technique that might destroy your database.
    - SQL injection is one of the most common web hacking techniques.
    - SQL injection is the placement of malicious code in SQL statements, via web page input.

    - SQL in Web Pages : SQL injection usually occurs when you ask a user for input, like their username/userid, and instead of a name/id, the user gives you an SQL statement that you will unknowingly run on your database.
        Look at the following example which creates a SELECT statement by adding a variable (txtUserId) to a select string. The variable is fetched from user input (getRequestString):

        txtUserId = getRequestString("UserId");
        txtSQL = "SELECT * FROM Users WHERE UserId = " + txtUserId;

    The rest of this chapter describes the potential dangers of using user input in SQL statements.
        a) SQL Injection Based on 1=1 is Always True
            - SELECT * FROM Users WHERE UserId = 105 OR 1=1; The SQL above is valid and will return ALL rows from the "Users" table, since OR 1=1 is always TRUE.
            - Does the example above look dangerous? What if the "Users" table contains names and passwords?
            - The SQL statement above is much the same as this: SELECT UserId, Name, Password FROM Users WHERE UserId = 105 or 1=1;
            
            - A hacker might get access to all the user names and passwords in a database, by simply inserting 105 OR 1=1 into the input field.

        b) SQL Injection Based on ""="" is Always True
            - Here is an example of a user login on a web site:
                Username: John Doe
                Password: myPass

            - Example
                uName = getRequestString("username");
                uPass = getRequestString("userpassword");
                sql = 'SELECT * FROM Users WHERE Name ="' + uName + '" AND Pass ="' + uPass + '"'
            Result : SELECT * FROM Users WHERE Name ="John Doe" AND Pass ="myPass"
            
            - A hacker might get access to user names and passwords in a database by simply inserting " OR ""=" into the user name or password text box:
                User Name: " or ""="
                Password: " or ""="

            - The code at the server will create a valid SQL statement like this : SELECT * FROM Users WHERE Name ="" or ""="" AND Pass ="" or ""=""
            - The SQL above is valid and will return all rows from the "Users" table, since OR ""="" is always TRUE.

        c) SQL Injection Based on Batched SQL Statements 
            - Most databases support batched SQL statement. 
            - A batch of SQL statements is a group of two or more SQL statements, separated by semicolons.
            - The SQL statement below will return all rows from the "Users" table, then delete the "Suppliers" table.

            -  Example : SELECT * FROM Users; DROP TABLE Suppliers
            
            - Look at the following example:
                txtUserId = getRequestString("UserId");
                txtSQL = "SELECT * FROM Users WHERE UserId = " + txtUserId;
            - And the following input : User id : 1055; DROP TABLE Suppliers
            - The valid SQL statement would look like this : SELECT * FROM Users WHERE UserId = 105; DROP TABLE Suppliers;

        d) Use SQL Parameters for Protection : To protect a web site from SQL injection, you can use SQL parameters.
            - SQL parameters are values that are added to an SQL query at execution time, in a controlled manner.

            - ASP.NET Razor Example
                txtUserId = getRequestString("UserId");
                txtSQL = "SELECT * FROM Users WHERE UserId = @0";
                db.Execute(txtSQL,txtUserId);
            Note that parameters are represented in the SQL statement by a @ marker.
            The SQL engine checks each parameter to ensure that it is correct for its column and are treated literally, and not as part of the SQL to be executed.

            - Examples : The following examples shows how to build parameterized queries in some common web languages.

                - SELECT STATEMENT IN ASP.NET:
                    txtUserId = getRequestString("UserId");
                    sql = "SELECT * FROM Customers WHERE CustomerId = @0";
                    command = new SqlCommand(sql);
                    command.Parameters.AddWithValue("@0",txtUserId);
                    command.ExecuteReader();
                
                - INSERT INTO STATEMENT IN ASP.NET:
                    txtNam = getRequestString("CustomerName");
                    txtAdd = getRequestString("Address");
                    txtCit = getRequestString("City");
                    txtSQL = "INSERT INTO Customers (CustomerName,Address,City) Values(@0,@1,@2)";
                    command = new SqlCommand(txtSQL);
                    command.Parameters.AddWithValue("@0",txtNam);
                    command.Parameters.AddWithValue("@1",txtAdd);
                    command.Parameters.AddWithValue("@2",txtCit);
                    command.ExecuteNonQuery();
                
                - INSERT INTO STATEMENT IN PHP:
                    $stmt = $dbh->prepare("INSERT INTO Customers (CustomerName,Address,City)
                    VALUES (:nam, :add, :cit)");
                    $stmt->bindParam(':nam', $txtNam);
                    $stmt->bindParam(':add', $txtAdd);
                    $stmt->bindParam(':cit', $txtCit);
                    $stmt->execute();

--------------------------------------------------------------------------------------------------------------------------------------

7. SQL Hosting : If you want your web site to be able to store and retrieve data from a database, your web server should have access to a database-system that uses the SQL language.
    - If your web server is hosted by an Internet Service Provider (ISP), you will have to look for SQL hosting plans.
    - The most common SQL hosting databases are MS SQL Server, Oracle, MySQL, and MS Access.
    - MySQL
        MySQL is also a popular database software for web sites.
        MySQL is a very powerful, robust and full featured SQL database system.
        MySQL is an inexpensive alternative to the expensive Microsoft and Oracle solutions.
    

--------------------------------------------------------------------------------------------------------------------------------------
